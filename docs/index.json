{
  "api/ProcessMemoryUtilities.Managed.NativeWrapper.html": {
    "href": "api/ProcessMemoryUtilities.Managed.NativeWrapper.html",
    "title": "Class NativeWrapper | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Class NativeWrapper Provides methods that replicate the behaviour of Kernel32 by using NtDll methods and applies basic error checking. Inheritance Object NativeWrapper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : ProcessMemoryUtilities.Managed Assembly : ProcessMemoryUtilities.Managed.dll Syntax public static class NativeWrapper Fields | Improve this Doc View Source INFINITE A constant used to specify an infinite waiting period Declaration public const uint INFINITE = 4294967295U Field Value Type Description UInt32 Properties | Improve this Doc View Source CaptureErrors Determines whether to capture the \"LastError\". Declaration public static bool CaptureErrors { get; set; } Property Value Type Description Boolean | Improve this Doc View Source HasError Determines if the previously called method on this thread was successful. Declaration public static bool HasError { get; } Property Value Type Description Boolean | Improve this Doc View Source LastError Returns the win32 error code set by the last failed method on this thread. Declaration public static int LastError { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CloseHandle(IntPtr) Closes an open object handle. Declaration public static bool CloseHandle(IntPtr handle) Parameters Type Name Description IntPtr handle A valid handle to an open object. Returns Type Description Boolean If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThread(IntPtr, IntPtr, IntPtr) Creates a thread that runs in the virtual address space of another process. Declaration public static IntPtr CreateRemoteThread(IntPtr handle, IntPtr startAddress, IntPtr parameter) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights, and may fail without these rights on certain platforms. For more information, see Process Security and Access Rights. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero.To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThread(IntPtr, IntPtr, IntPtr, ThreadCreationFlags) Creates a thread that runs in the virtual address space of another process. Declaration public static IntPtr CreateRemoteThread(IntPtr handle, IntPtr startAddress, IntPtr parameter, ThreadCreationFlags creationFlags) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights, and may fail without these rights on certain platforms. For more information, see Process Security and Access Rights. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function. ThreadCreationFlags creationFlags Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero.To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThread(IntPtr, IntPtr, IntPtr, ThreadCreationFlags, out UInt32) Creates a thread that runs in the virtual address space of another process. Declaration public static IntPtr CreateRemoteThread(IntPtr handle, IntPtr startAddress, IntPtr parameter, ThreadCreationFlags creationFlags, out uint threadId) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights, and may fail without these rights on certain platforms. For more information, see Process Security and Access Rights. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function. ThreadCreationFlags creationFlags UInt32 threadId A pointer to a variable that receives the thread identifier. If this parameter is NULL, the thread identifier is not returned. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero.To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThread(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, ThreadCreationFlags, IntPtr) Creates a thread that runs in the virtual address space of another process. Declaration public static IntPtr CreateRemoteThread(IntPtr handle, IntPtr threadAttributes, IntPtr stackSize, IntPtr startAddress, IntPtr parameter, ThreadCreationFlags creationFlags, IntPtr threadId) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights, and may fail without these rights on certain platforms. For more information, see Process Security and Access Rights. IntPtr threadAttributes A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. If lpThreadAttributes is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The access control lists (ACL) in the default security descriptor for a thread come from the primary token of the creator. IntPtr stackSize The initial size of the stack, in bytes. The system rounds this value to the nearest page. If this parameter is 0 (zero), the new thread uses the default size for the executable. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function. ThreadCreationFlags creationFlags IntPtr threadId A pointer to a variable that receives the thread identifier. If this parameter is NULL, the thread identifier is not returned. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero.To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThread(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, ThreadCreationFlags, out UInt32) Creates a thread that runs in the virtual address space of another process. Declaration public static IntPtr CreateRemoteThread(IntPtr handle, IntPtr threadAttributes, IntPtr stackSize, IntPtr startAddress, IntPtr parameter, ThreadCreationFlags creationFlags, out uint threadId) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights, and may fail without these rights on certain platforms. For more information, see Process Security and Access Rights. IntPtr threadAttributes A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. If lpThreadAttributes is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The access control lists (ACL) in the default security descriptor for a thread come from the primary token of the creator. IntPtr stackSize The initial size of the stack, in bytes. The system rounds this value to the nearest page. If this parameter is 0 (zero), the new thread uses the default size for the executable. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function. ThreadCreationFlags creationFlags UInt32 threadId A pointer to a variable that receives the thread identifier. If this parameter is NULL, the thread identifier is not returned. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero.To get extended error information, call GetLastError. | Improve this Doc View Source GetRealWaitObjectResult(WaitObjectResult) Turns the given WaitObjectResult into one of the defined enum values by stripping the objects index. Declaration public static WaitObjectResult GetRealWaitObjectResult(WaitObjectResult value) Parameters Type Name Description WaitObjectResult value A WaitObjectResult. Returns Type Description WaitObjectResult A WaitObjectResult which is guaranteed to be one of the defined enum values. | Improve this Doc View Source GetRealWaitObjectResult(WaitObjectResult, out Int32) Turns the given WaitObjectResult into one of the defined enum values and returns the objects index. Declaration public static WaitObjectResult GetRealWaitObjectResult(WaitObjectResult value, out int index) Parameters Type Name Description WaitObjectResult value A WaitObjectResult Int32 index A variable that receives the index of the awaited object. Returns Type Description WaitObjectResult A WaitObjectResult which is guaranteed to be one of the defined enum values. | Improve this Doc View Source OpenProcess(ProcessAccessFlags, Boolean, Int32) Opens an existing local process object. Declaration public static IntPtr OpenProcess(ProcessAccessFlags desiredAccess, bool inheritHandle, int processId) Parameters Type Name Description ProcessAccessFlags desiredAccess The access to the process object. This access right is checked against the security descriptor for the process. Boolean inheritHandle If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle. Int32 processId The identifier of the local process to be opened. Returns Type Description IntPtr If the function succeeds, the return value is an open handle to the specified process. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source OpenProcess(ProcessAccessFlags, Int32) Opens an existing local process object. Declaration public static IntPtr OpenProcess(ProcessAccessFlags desiredAccess, int processId) Parameters Type Name Description ProcessAccessFlags desiredAccess The access to the process object. This access right is checked against the security descriptor for the process. Int32 processId The identifier of the local process to be opened. Returns Type Description IntPtr If the function succeeds, the return value is an open handle to the specified process. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source ReadProcessMemory(IntPtr, IntPtr, IntPtr, IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size) Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. IntPtr buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr size The number of bytes to be read from the specified process. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. | Improve this Doc View Source ReadProcessMemory(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size, IntPtr numberOfBytesRead) Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. IntPtr buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr size The number of bytes to be read from the specified process. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. | Improve this Doc View Source ReadProcessMemory(IntPtr, IntPtr, IntPtr, IntPtr, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size, out IntPtr numberOfBytesRead) Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. IntPtr buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr size The number of bytes to be read from the specified process. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. | Improve this Doc View Source ReadProcessMemory<T>(IntPtr, IntPtr, ref T) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemory<T>(IntPtr handle, IntPtr baseAddress, ref T buffer) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemory<T>(IntPtr, IntPtr, ref T, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemory<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryArray<T>(IntPtr, IntPtr, T[]) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryArray<T>(IntPtr, IntPtr, T[], Int32) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from inside the array to copy to. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryArray<T>(IntPtr, IntPtr, T[], Int32, Int32) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, int length) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from inside the array to copy to. Int32 length The number of bytes to copy to the array. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryArray<T>(IntPtr, IntPtr, T[], Int32, Int32, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, int length, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from inside the array to copy to. Int32 length The number of bytes to copy to the array. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryArray<T>(IntPtr, IntPtr, T[], Int32, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from inside the array to copy to. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryArray<T>(IntPtr, IntPtr, T[], out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, Int32) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, int length) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Int32 length The number of bytes to copy to the buffer. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, Int32, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, int length, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Int32 length The number of bytes to copy to the buffer. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source ReadProcessMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static bool ReadProcessMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from the start of the buffer. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source VirtualAllocEx(IntPtr, IntPtr, IntPtr, AllocationType, MemoryProtectionFlags) Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero. Declaration public static IntPtr VirtualAllocEx(IntPtr handle, IntPtr address, IntPtr size, AllocationType allocationType, MemoryProtectionFlags memoryProtection) Parameters Type Name Description IntPtr handle The handle to a process. The function allocates memory within the virtual address space of this process. The handle must have the PROCESS_VM_OPERATION access right.For more information, see Process Security and Access Rights. IntPtr address The pointer that specifies a desired starting address for the region of pages that you want to allocate. If you are reserving memory, the function rounds this address down to the nearest multiple of the allocation granularity. If you are committing memory that is already reserved, the function rounds this address down to the nearest page boundary.To determine the size of a page and the allocation granularity on the host computer, use the GetSystemInfo function. If lpAddress is NULL, the function determines where to allocate the region. If this address is within an enclave that you have not initialized by calling InitializeEnclave, VirtualAllocEx allocates a page of zeros for the enclave at that address.The page must be previously uncommitted, and will not be measured with the EEXTEND instruction of the Intel Software Guard Extensions programming model. If the address in within an enclave that you initialized, then the allocation operation fails with the ERROR_INVALID_ADDRESS error. IntPtr size The size of the region of memory to allocate, in bytes. If lpAddress is NULL, the function rounds dwSize up to the next page boundary. If lpAddress is not NULL, the function allocates all pages that contain one or more bytes in the range from lpAddress to lpAddress+dwSize.This means, for example, that a 2-byte range that straddles a page boundary causes the function to allocate both pages. AllocationType allocationType The type of memory allocation. This parameter must contain one of the following values. MemoryProtectionFlags memoryProtection The memory protection for the region of pages to be allocated. If the pages are being committed, you can specify any one of the memory protection constants. Returns Type Description IntPtr If the function succeeds, the return value is the base address of the allocated region of pages. If the function fails, the return value is NULL.To get extended error information, call GetLastError. | Improve this Doc View Source VirtualFreeEx(IntPtr, IntPtr, IntPtr, FreeType) Releases, decommits, or releases and decommits a region of memory within the virtual address space of a specified process. Declaration public static bool VirtualFreeEx(IntPtr handle, IntPtr address, IntPtr size, FreeType freeType) Parameters Type Name Description IntPtr handle A handle to a process. The function frees memory within the virtual address space of the process. The handle must have the PROCESS_VM_OPERATION access right.For more information, see Process Security and Access Rights. IntPtr address A pointer to the starting address of the region of memory to be freed. If the dwFreeType parameter is MEM_RELEASE, lpAddress must be the base address returned by the VirtualAllocEx function when the region is reserved. IntPtr size The size of the region of memory to free, in bytes. If the dwFreeType parameter is MEM_RELEASE, dwSize must be 0 (zero). The function frees the entire region that is reserved in the initial allocation call to VirtualAllocEx. If dwFreeType is MEM_DECOMMIT, the function decommits all memory pages that contain one or more bytes in the range from the lpAddress parameter to (lpAddress+dwSize). This means, for example, that a 2-byte region of memory that straddles a page boundary causes both pages to be decommitted.If lpAddress is the base address returned by VirtualAllocEx and dwSize is 0 (zero), the function decommits the entire region that is allocated by VirtualAllocEx.After that, the entire region is in the reserved state. FreeType freeType The type of free operation. Returns Type Description Boolean If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError. | Improve this Doc View Source VirtualProtectEx(IntPtr, IntPtr, IntPtr, MemoryProtectionFlags, out MemoryProtectionFlags) Changes the protection on a region of committed pages in the virtual address space of a specified process. Declaration public static bool VirtualProtectEx(IntPtr handle, IntPtr address, IntPtr size, MemoryProtectionFlags newProtect, out MemoryProtectionFlags oldProtect) Parameters Type Name Description IntPtr handle A handle to the process whose memory protection is to be changed. The handle must have the PROCESS_VM_OPERATION access right. For more information, see Process Security and Access Rights. IntPtr address A pointer to the base address of the region of pages whose access protection attributes are to be changed. All pages in the specified region must be within the same reserved region allocated when calling the VirtualAlloc or VirtualAllocEx function using MEM_RESERVE. The pages cannot span adjacent reserved regions that were allocated by separate calls to VirtualAlloc or VirtualAllocEx using MEM_RESERVE. IntPtr size The size of the region whose access protection attributes are changed, in bytes. The region of affected pages includes all pages containing one or more bytes in the range from the lpAddress parameter to (lpAddress+dwSize). This means that a 2-byte range straddling a page boundary causes the protection attributes of both pages to be changed. MemoryProtectionFlags newProtect The memory protection option. This parameter can be one of the memory protection constants. For mapped views, this value must be compatible with the access protection specified when the view was mapped(see MapViewOfFile, MapViewOfFileEx, and MapViewOfFileExNuma). MemoryProtectionFlags oldProtect A pointer to a variable that receives the previous access protection of the first page in the specified region of pages. If this parameter is NULL or does not point to a valid variable, the function fails. Returns Type Description Boolean If the function succeeds, the return value is true. If the function fails, the return value is false. To get extended error information, call GetLastError. | Improve this Doc View Source WaitForSingleObject(IntPtr, UInt32) Waits until the specified object is in the signaled state or the time-out interval elapses. Declaration public static WaitObjectResult WaitForSingleObject(IntPtr handle, uint timeout) Parameters Type Name Description IntPtr handle A handle to the object. UInt32 timeout The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the object is signaled or the interval elapses. If dwMilliseconds is zero, the function does not enter a wait state if the object is not signaled; it always returns immediately. If dwMilliseconds is INFINITE, the function will return only when the object is signaled. Returns Type Description WaitObjectResult If the function succeeds, the return value indicates the event that caused the function to return. | Improve this Doc View Source WriteProcessMemory(IntPtr, IntPtr, IntPtr, IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size) Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. IntPtr buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr size The number of bytes to be written to the specified process. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. | Improve this Doc View Source WriteProcessMemory(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size, IntPtr numberOfBytesWritten) Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. IntPtr buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr size The number of bytes to be written to the specified process. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. | Improve this Doc View Source WriteProcessMemory(IntPtr, IntPtr, IntPtr, IntPtr, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size, out IntPtr numberOfBytesWritten) Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. IntPtr buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr size The number of bytes to be written to the specified process. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. | Improve this Doc View Source WriteProcessMemory<T>(IntPtr, IntPtr, ref T) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemory<T>(IntPtr handle, IntPtr baseAddress, ref T buffer) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemory<T>(IntPtr, IntPtr, ref T, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemory<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryArray<T>(IntPtr, IntPtr, T[]) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryArray<T>(IntPtr, IntPtr, T[], Int32) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryArray<T>(IntPtr, IntPtr, T[], Int32, Int32) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, int length) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Int32 length The number of bytes to copy from the array. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryArray<T>(IntPtr, IntPtr, T[], Int32, Int32, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, int length, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Int32 length The number of bytes to copy from the array. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryArray<T>(IntPtr, IntPtr, T[], Int32, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryArray<T>(IntPtr, IntPtr, T[], out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, Int32) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, int length) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Int32 length The number of bytes to copy to the buffer. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, Int32, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, int length, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Int32 length The number of bytes to copy to the buffer. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T | Improve this Doc View Source WriteProcessMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static bool WriteProcessMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description Boolean Returns true when the function succeeds; otherwise false. To get extended error information, call GetLastError. Type Parameters Name Description T"
  },
  "api/ProcessMemoryUtilities.Native.NtDll.html": {
    "href": "api/ProcessMemoryUtilities.Native.NtDll.html",
    "title": "Class NtDll | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Class NtDll Provides access to some methods of ntdll.dll Inheritance Object NtDll Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax public static class NtDll Methods | Improve this Doc View Source NtAllocateVirtualMemory(IntPtr, IntPtr, AllocationType, MemoryProtectionFlags, out IntPtr) Reserves, commits, or changes the state of a region of memory within the virtual address space of a specified process. The function initializes the memory it allocates to zero. Declaration public static uint NtAllocateVirtualMemory(IntPtr handle, IntPtr size, AllocationType allocationType, MemoryProtectionFlags memoryProtection, out IntPtr address) Parameters Type Name Description IntPtr handle The handle to a process. The function allocates memory within the virtual address space of this process. The handle must have the PROCESS_VM_OPERATION access right.For more information, see Process Security and Access Rights. IntPtr size The size of the region of memory to allocate, in bytes. AllocationType allocationType The type of memory allocation. Common flags are AllocationType.Commit | AllocationType.Reserve. MemoryProtectionFlags memoryProtection The memory protection for the region of pages to be allocated. If the pages are being committed, you can specify any one of the memory protection constants. IntPtr address A pointer to a variable that receives the base address of the allocated region of pages. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtClose(IntPtr) Closes an open object handle. Declaration public static uint NtClose(IntPtr handle) Parameters Type Name Description IntPtr handle A valid handle to an open object. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtError(UInt32) Checks if the specified NTSTATUS is a error type. Declaration public static bool NtError(uint value) Parameters Type Name Description UInt32 value A NTSTATUS value. Returns Type Description Boolean Returns true if the specified NTSTATUS is a error type. | Improve this Doc View Source NtFreeVirtualMemory(IntPtr, IntPtr, IntPtr, FreeType) Releases, decommits, or releases and decommits a region of memory within the virtual address space of a specified process. Declaration public static uint NtFreeVirtualMemory(IntPtr handle, IntPtr address, IntPtr size, FreeType freeType) Parameters Type Name Description IntPtr handle A handle to a process. The function frees memory within the virtual address space of the process. The handle must have the PROCESS_VM_OPERATION access right.For more information, see Process Security and Access Rights. IntPtr address A pointer to the starting address of the region of memory to be freed. If the dwFreeType parameter is MEM_RELEASE, lpAddress must be the base address returned by the VirtualAllocEx function when the region is reserved. IntPtr size The size of the region of memory to free, in bytes. If the dwFreeType parameter is MEM_RELEASE, dwSize must be 0 (zero). The function frees the entire region that is reserved in the initial allocation call to VirtualAllocEx. If dwFreeType is MEM_DECOMMIT, the function decommits all memory pages that contain one or more bytes in the range from the lpAddress parameter to (lpAddress+dwSize). This means, for example, that a 2-byte region of memory that straddles a page boundary causes both pages to be decommitted. If lpAddress is the base address returned by VirtualAllocEx and dwSize is 0 (zero), the function decommits the entire region that is allocated by VirtualAllocEx. After that, the entire region is in the reserved state. FreeType freeType The type of free operation. This parameter can be one of the FreeType values. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtInformation(UInt32) Checks if the specified NTSTATUS is a informational type. Declaration public static bool NtInformation(uint value) Parameters Type Name Description UInt32 value A NTSTATUS value. Returns Type Description Boolean Returns true if the specified NTSTATUS is a informational type. | Improve this Doc View Source NtOpenProcess(ProcessAccessFlags, Boolean, Int32, out IntPtr) Opens an existing local process object. Declaration public static uint NtOpenProcess(ProcessAccessFlags desiredAccess, bool inheritHandle, int processId, out IntPtr handle) Parameters Type Name Description ProcessAccessFlags desiredAccess The access to the process object. This access right is checked against the security descriptor for the process. This parameter can be one or more of the process access rights. Boolean inheritHandle If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle. Int32 processId The identifier of the local process to be opened. IntPtr handle A variable that receives the opened handle. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtOpenProcess(ProcessAccessFlags, Int32, out IntPtr) Opens an existing local process object. Declaration public static uint NtOpenProcess(ProcessAccessFlags desiredAccess, int processId, out IntPtr handle) Parameters Type Name Description ProcessAccessFlags desiredAccess The access to the process object. This access right is checked against the security descriptor for the process. This parameter can be one or more of the process access rights. Int32 processId The identifier of the local process to be opened. IntPtr handle A variable that receives the opened handle. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtProtectVirtualMemory(IntPtr, IntPtr, IntPtr, MemoryProtectionFlags, out MemoryProtectionFlags) Changes the protection on a region of committed pages in the virtual address space of a specified process. Declaration public static uint NtProtectVirtualMemory(IntPtr handle, IntPtr address, IntPtr size, MemoryProtectionFlags newProtection, out MemoryProtectionFlags oldProtection) Parameters Type Name Description IntPtr handle A handle to the process whose memory protection is to be changed. The handle must have the PROCESS_VM_OPERATION access right. For more information, see Process Security and Access Rights. IntPtr address A pointer to the base address of the region of pages whose access protection attributes are to be changed. All pages in the specified region must be within the same reserved region allocated when calling the VirtualAlloc or VirtualAllocEx function using MEM_RESERVE. The pages cannot span adjacent reserved regions that were allocated by separate calls to VirtualAlloc or VirtualAllocEx using MEM_RESERVE. IntPtr size The size of the region whose access protection attributes are changed, in bytes. The region of affected pages includes all pages containing one or more bytes in the range from the lpAddress parameter to (lpAddress+dwSize). This means that a 2-byte range straddling a page boundary causes the protection attributes of both pages to be changed. MemoryProtectionFlags newProtection The memory protection option. This parameter can be one of the MemoryProtectionFlags. MemoryProtectionFlags oldProtection A pointer to a variable that receives the previous MemoryProtectionFlags of the first page in the specified region of pages. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtReadVirtualMemory(IntPtr, IntPtr, IntPtr, IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size) Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. IntPtr buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr size The number of bytes to be read from the specified process. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtReadVirtualMemory(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size, IntPtr numberOfBytesRead) Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. IntPtr buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr size The number of bytes to be read from the specified process. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is IntPtr.Zero, the parameter is ignored. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtReadVirtualMemory(IntPtr, IntPtr, IntPtr, IntPtr, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size, out IntPtr numberOfBytesRead) Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. IntPtr buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr size The number of bytes to be read from the specified process. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtReadVirtualMemory<T>(IntPtr, IntPtr, ref T) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemory<T>(IntPtr handle, IntPtr baseAddress, ref T buffer) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemory<T>(IntPtr, IntPtr, ref T, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemory<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is IntPtr.Zero, the parameter is ignored. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryArray<T>(IntPtr, IntPtr, T[]) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryArray<T>(IntPtr, IntPtr, T[], Int32) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from inside the array to copy to. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryArray<T>(IntPtr, IntPtr, T[], Int32, Int32) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, int length) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from inside the array to copy to. Int32 length The number of bytes to copy to the array. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryArray<T>(IntPtr, IntPtr, T[], Int32, Int32, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, int length, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from inside the array to copy to. Int32 length The number of bytes to copy to the array. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. If lpNumberOfBytesRead is IntPtr.Zero, the parameter is ignored. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryArray<T>(IntPtr, IntPtr, T[], Int32, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from inside the array to copy to. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryArray<T>(IntPtr, IntPtr, T[], out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T[] buffer A pointer to a buffer that receives the contents from the address space of the specified process. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, Int32) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, int length) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Int32 length The number of bytes to copy to the buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, Int32, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, int length, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Int32 length The number of bytes to copy to the buffer. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtReadVirtualMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, out IntPtr) ReadProcessMemory copies the data in the specified address range from the address space of the specified process into the specified buffer of the current process. Any process that has a handle with PROCESS_VM_READ access can call the function. The entire area to be read must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtReadVirtualMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, out IntPtr numberOfBytesRead) where T : struct Parameters Type Name Description IntPtr handle A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process. IntPtr baseAddress A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails. T buffer A pointer to a buffer that receives the contents from the address space of the specified process. Int32 offset A byte offset from the start of the buffer. IntPtr numberOfBytesRead A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtSuccess(UInt32) Checks if the specified NTSTATUS is a success or informational type. Declaration public static bool NtSuccess(uint value) Parameters Type Name Description UInt32 value A NTSTATUS value. Returns Type Description Boolean Returns true if the specified NTSTATUS is a success or informational type. | Improve this Doc View Source NtSuccessOnly(UInt32) Checks if the specified NTSTATUS is a success type. Declaration public static bool NtSuccessOnly(uint value) Parameters Type Name Description UInt32 value A NTSTATUS value. Returns Type Description Boolean Returns true if the specified NTSTATUS is a success type. | Improve this Doc View Source NtWarning(UInt32) Checks if the specified NTSTATUS is a warning type. Declaration public static bool NtWarning(uint value) Parameters Type Name Description UInt32 value A NTSTATUS value. Returns Type Description Boolean Returns true if the specified NTSTATUS is a warning type. | Improve this Doc View Source NtWriteVirtualMemory(IntPtr, IntPtr, IntPtr, IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size) Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. IntPtr buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr size The number of bytes to be written to the specified process. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtWriteVirtualMemory(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size, IntPtr numberOfBytesWritten) Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. IntPtr buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr size The number of bytes to be written to the specified process. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtWriteVirtualMemory(IntPtr, IntPtr, IntPtr, IntPtr, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemory(IntPtr handle, IntPtr baseAddress, IntPtr buffer, IntPtr size, out IntPtr numberOfBytesWritten) Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. IntPtr buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr size The number of bytes to be written to the specified process. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. | Improve this Doc View Source NtWriteVirtualMemory<T>(IntPtr, IntPtr, ref T) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemory<T>(IntPtr handle, IntPtr baseAddress, ref T buffer) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemory<T>(IntPtr, IntPtr, ref T, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemory<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryArray<T>(IntPtr, IntPtr, T[]) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryArray<T>(IntPtr, IntPtr, T[], Int32) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryArray<T>(IntPtr, IntPtr, T[], Int32, Int32) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, int length) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Int32 length The number of bytes to copy from the array. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryArray<T>(IntPtr, IntPtr, T[], Int32, Int32, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, int length, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. Int32 length The number of bytes to copy from the array. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified process. This parameter is optional. If lpNumberOfBytesWritten is IntPtr.Zero, the parameter is ignored. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryArray<T>(IntPtr, IntPtr, T[], Int32, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, int offset, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from inside the array to copy from. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryArray<T>(IntPtr, IntPtr, T[], out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryArray<T>(IntPtr handle, IntPtr baseAddress, T[] buffer, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T[] buffer A pointer to the buffer that contains data to be written in the address space of the specified process. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, Int32) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, int length) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Int32 length The number of bytes to copy to the buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, Int32, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, int length, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from the start of the buffer. Int32 length The number of bytes to copy to the buffer. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source NtWriteVirtualMemoryPartial<T>(IntPtr, IntPtr, ref T, Int32, out IntPtr) WriteProcessMemory copies the data from the specified buffer in the current process to the address range of the specified process. Any process that has a handle with PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process to be written to can call the function. Typically but not always, the process with address space that is being written to is being debugged. The entire area to be written to must be accessible, and if it is not accessible, the function fails. Declaration public static uint NtWriteVirtualMemoryPartial<T>(IntPtr handle, IntPtr baseAddress, ref T buffer, int offset, out IntPtr numberOfBytesWritten) where T : struct Parameters Type Name Description IntPtr handle A handle to the process memory to be modified. The handle must have PROCESS_VM_WRITE and PROCESS_VM_OPERATION access to the process. IntPtr baseAddress A pointer to the base address in the specified process to which data is written. Before data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for write access, and if it is not accessible, the function fails. T buffer A pointer to the buffer that contains data to be written in the address space of the specified process. Int32 offset A byte offset from the start of the buffer. IntPtr numberOfBytesWritten A pointer to a variable that receives the number of bytes transferred into the specified buffer. Returns Type Description UInt32 Returns an NTSTATUS success or error code. Type Parameters Name Description T | Improve this Doc View Source RtlNtStatusToDosError(UInt32) Converts the specified NTSTATUS code to its equivalent system error code. Declaration public static uint RtlNtStatusToDosError(uint value) Parameters Type Name Description UInt32 value The NTSTATUS code to be converted. Returns Type Description UInt32 The function returns the corresponding system error code."
  },
  "api/ProcessMemoryUtilities.Native.Kernel32.html": {
    "href": "api/ProcessMemoryUtilities.Native.Kernel32.html",
    "title": "Class Kernel32 | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Class Kernel32 Provides access to some methods of kernel32.dll Inheritance Object Kernel32 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax public static class Kernel32 Fields | Improve this Doc View Source INFINITE A constant used to specify an infinite waiting period Declaration public const uint INFINITE = 4294967295U Field Value Type Description UInt32 Methods | Improve this Doc View Source CreateRemoteThreadEx(IntPtr, IntPtr, IntPtr) Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity. Declaration public static IntPtr CreateRemoteThreadEx(IntPtr handle, IntPtr startAddress, IntPtr parameter) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function pointed to by lpStartAddress. This parameter can be IntPtr.Zero. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThreadEx(IntPtr, IntPtr, IntPtr, ThreadCreationFlags) Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity. Declaration public static IntPtr CreateRemoteThreadEx(IntPtr handle, IntPtr startAddress, IntPtr parameter, ThreadCreationFlags creationFlags) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function pointed to by lpStartAddress. This parameter can be IntPtr.Zero. ThreadCreationFlags creationFlags The flags that control the creation of the thread. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThreadEx(IntPtr, IntPtr, IntPtr, ThreadCreationFlags, out UInt32) Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity. Declaration public static IntPtr CreateRemoteThreadEx(IntPtr handle, IntPtr startAddress, IntPtr parameter, ThreadCreationFlags creationFlags, out uint threadId) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function pointed to by lpStartAddress. This parameter can be IntPtr.Zero. ThreadCreationFlags creationFlags The flags that control the creation of the thread. UInt32 threadId A variable that receives the thread identifier. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThreadEx(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, ThreadCreationFlags, IntPtr, IntPtr) Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity. Declaration public static IntPtr CreateRemoteThreadEx(IntPtr handle, IntPtr threadAttributes, IntPtr stackSize, IntPtr startAddress, IntPtr parameter, ThreadCreationFlags creationFlags, IntPtr attributeList, IntPtr threadId) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights. IntPtr threadAttributes A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. If lpThreadAttributes is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The access control lists (ACL) in the default security descriptor for a thread come from the primary token of the creator. IntPtr stackSize The initial size of the stack, in bytes. The system rounds this value to the nearest page. If this parameter is 0 (zero), the new thread uses the default size for the executable. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function pointed to by lpStartAddress. This parameter can be IntPtr.Zero. ThreadCreationFlags creationFlags The flags that control the creation of the thread. IntPtr attributeList An attribute list that contains additional parameters for the new thread. This list is created by the InitializeProcThreadAttributeList function. IntPtr threadId A variable that receives the thread identifier. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source CreateRemoteThreadEx(IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, ThreadCreationFlags, IntPtr, out UInt32) Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity. Declaration public static IntPtr CreateRemoteThreadEx(IntPtr handle, IntPtr threadAttributes, IntPtr stackSize, IntPtr startAddress, IntPtr parameter, ThreadCreationFlags creationFlags, IntPtr attributeList, out uint threadId) Parameters Type Name Description IntPtr handle A handle to the process in which the thread is to be created. The handle must have the PROCESS_CREATE_THREAD, PROCESS_QUERY_INFORMATION, PROCESS_VM_OPERATION, PROCESS_VM_WRITE, and PROCESS_VM_READ access rights. IntPtr threadAttributes A pointer to a SECURITY_ATTRIBUTES structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. If lpThreadAttributes is NULL, the thread gets a default security descriptor and the handle cannot be inherited. The access control lists (ACL) in the default security descriptor for a thread come from the primary token of the creator. IntPtr stackSize The initial size of the stack, in bytes. The system rounds this value to the nearest page. If this parameter is 0 (zero), the new thread uses the default size for the executable. IntPtr startAddress A pointer to the application-defined function of type LPTHREAD_START_ROUTINE to be executed by the thread and represents the starting address of the thread in the remote process. The function must exist in the remote process. IntPtr parameter A pointer to a variable to be passed to the thread function pointed to by lpStartAddress. This parameter can be IntPtr.Zero. ThreadCreationFlags creationFlags The flags that control the creation of the thread. IntPtr attributeList An attribute list that contains additional parameters for the new thread. This list is created by the InitializeProcThreadAttributeList function. UInt32 threadId A variable that receives the thread identifier. Returns Type Description IntPtr If the function succeeds, the return value is a handle to the new thread. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source GetRealWaitObjectResult(WaitObjectResult) Turns the given WaitObjectResult into one of the defined enum values by stripping the objects index. Declaration public static WaitObjectResult GetRealWaitObjectResult(WaitObjectResult value) Parameters Type Name Description WaitObjectResult value A WaitObjectResult. Returns Type Description WaitObjectResult A WaitObjectResult which is guaranteed to be one of the defined enum values. | Improve this Doc View Source GetRealWaitObjectResult(WaitObjectResult, out Int32) Turns the given WaitObjectResult into one of the defined enum values and returns the objects index. Declaration public static WaitObjectResult GetRealWaitObjectResult(WaitObjectResult value, out int index) Parameters Type Name Description WaitObjectResult value A WaitObjectResult Int32 index A variable that receives the index of the awaited object. Returns Type Description WaitObjectResult A WaitObjectResult which is guaranteed to be one of the defined enum values. | Improve this Doc View Source OpenProcess(ProcessAccessFlags, Boolean, Int32) Opens an existing local process object. Declaration public static IntPtr OpenProcess(ProcessAccessFlags desiredAccess, bool inheritHandle, int processId) Parameters Type Name Description ProcessAccessFlags desiredAccess The access to the process object. This access right is checked against the security descriptor for the process. Boolean inheritHandle If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle. Int32 processId The identifier of the local process to be opened. Returns Type Description IntPtr If the function succeeds, the return value is an open handle to the specified process. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source OpenProcess(ProcessAccessFlags, Int32) Opens an existing local process object. Declaration public static IntPtr OpenProcess(ProcessAccessFlags desiredAccess, int processId) Parameters Type Name Description ProcessAccessFlags desiredAccess The access to the process object. This access right is checked against the security descriptor for the process. Int32 processId The identifier of the local process to be opened. Returns Type Description IntPtr If the function succeeds, the return value is an open handle to the specified process. If the function fails, the return value is IntPtr.Zero. To get extended error information, call GetLastError. | Improve this Doc View Source WaitForSingleObject(IntPtr, UInt32) Waits until the specified object is in the signaled state or the time-out interval elapses. Declaration public static WaitObjectResult WaitForSingleObject(IntPtr handle, uint timeout) Parameters Type Name Description IntPtr handle A handle to the object. UInt32 timeout The time-out interval, in milliseconds. If a nonzero value is specified, the function waits until the object is signaled or the interval elapses. If dwMilliseconds is zero, the function does not enter a wait state if the object is not signaled; it always returns immediately. If dwMilliseconds is INFINITE, the function will return only when the object is signaled. Returns Type Description WaitObjectResult If the function succeeds, the return value indicates the event that caused the function to return."
  },
  "api/ProcessMemoryUtilities.Native.html": {
    "href": "api/ProcessMemoryUtilities.Native.html",
    "title": "Namespace ProcessMemoryUtilities.Native | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Namespace ProcessMemoryUtilities.Native Classes Kernel32 Provides access to some methods of kernel32.dll NtDll Provides access to some methods of ntdll.dll Enums AllocationType Defines the different types of memory allocations. FreeType Defines the different types of free operations. MemoryProtectionFlags Defines the memory protection constants. NtStatus Contains all NTSTATUS codes that could possibly happen when using this library. These may be incomplete. ProcessAccessFlags Defines process security and access rights. ThreadCreationFlags Defines flags that control the creation of a remote thread. WaitObjectResult Defines the events that cause a function like WaitForSingleObject to return."
  },
  "api/ProcessMemoryUtilities.Native.ProcessAccessFlags.html": {
    "href": "api/ProcessMemoryUtilities.Native.ProcessAccessFlags.html",
    "title": "Enum ProcessAccessFlags | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Enum ProcessAccessFlags Defines process security and access rights. Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax [Flags] public enum ProcessAccessFlags : uint Fields Name Description All All possible access rights for a process object.Windows Server 2003 and Windows XP: The size of the PROCESS_ALL_ACCESS flag increased on Windows Server 2008 and Windows Vista. If an application compiled for Windows Server 2008 and Windows Vista is run on Windows Server 2003 or Windows XP, the PROCESS_ALL_ACCESS flag is too large and the function specifying this flag fails with ERROR_ACCESS_DENIED. To avoid this problem, specify the minimum set of access rights required for the operation. If PROCESS_ALL_ACCESS must be used, set _WIN32_WINNT to the minimum operating system targeted by your application (for example, #define _WIN32_WINNT _WIN32_WINNT_WINXP). For more information, see Using the Windows Headers. Allocate Required to allocate memory in the address space of another process. CreateProcess Required to create a process. CreateThread Required to create a thread. DuplicateHandle Required to duplicate a handle using DuplicateHandle. Execute Required when using CreateRemoteThread(Ex) to execute code in a another process. Information Required to query information from another process. Invalid An invalid value. QueryInformation Required to retrieve certain information about a process, such as its token, exit code, and priority class (see OpenProcessToken). QueryLimitedInformation Required to retrieve certain information about a process (see GetExitCodeProcess, GetPriorityClass, IsProcessInJob, QueryFullProcessImageName). A handle that has the PROCESS_QUERY_INFORMATION access right is automatically granted PROCESS_QUERY_LIMITED_INFORMATION.Windows Server 2003 and Windows XP: This access right is not supported. Read Required to read memory in a process using ReadProcessMemory. ReadWrite Combines read and write access of a process memory. SetInformation Required to set certain information about a process, such as its priority class (see SetPriorityClass). SetQuota Required to set memory limits using SetProcessWorkingSetSize. SuspendResume Required to set memory limits using SetProcessWorkingSetSize. Synchronize Required to wait for the process to terminate using the wait functions. Terminate Required to terminate a process using TerminateProcess. VirtualMemoryOperation Required to perform an operation on the address space of a process (see VirtualProtectEx and WriteProcessMemory). VirtualMemoryRead Required to read memory in a process using ReadProcessMemory. VirtualMemoryWrite Combine with VirtualMemoryOperation for Write access. Write Required to write to memory in a process using WriteProcessMemory."
  },
  "api/ProcessMemoryUtilities.Native.AllocationType.html": {
    "href": "api/ProcessMemoryUtilities.Native.AllocationType.html",
    "title": "Enum AllocationType | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Enum AllocationType Defines the different types of memory allocations. Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax [Flags] public enum AllocationType : uint Fields Name Description Commit Allocates memory charges (from the overall size of memory and the paging files on disk) for the specified reserved memory pages. The function also guarantees that when the caller later initially accesses the memory, the contents will be zero. Actual physical pages are not allocated unless/until the virtual addresses are actually accessed. To reserve and commit pages in one step, call VirtualAllocEx with MEM_COMMIT | MEM_RESERVE. Attempting to commit a specific address range by specifying MEM_COMMIT without MEM_RESERVE and a non-NULL lpAddress fails unless the entire range has already been reserved. The resulting error code is ERROR_INVALID_ADDRESS. An attempt to commit a page that is already committed does not cause the function to fail. This means that you can commit pages without first determining the current commitment state of each page. If lpAddress specifies an address within an enclave, flAllocationType must be MEM_COMMIT. Invalid An invalid value. LargePages Allocates memory using large page support. The size and alignment must be a multiple of the large-page minimum. To obtain this value, use the GetLargePageMinimum function. If you specify this value, you must also specify MEM_RESERVE and MEM_COMMIT. Physical Reserves an address range that can be used to map Address Windowing Extensions (AWE) pages. This value must be used with MEM_RESERVE and no other values. Reserve Reserves a range of the process's virtual address space without allocating any actual physical storage in memory or in the paging file on disk. You commit reserved pages by calling VirtualAllocEx again with MEM_COMMIT. To reserve and commit pages in one step, call VirtualAllocEx with MEM_COMMIT | MEM_RESERVE. Other memory allocation functions, such as malloc and LocalAlloc, cannot use reserved memory until it has been released. Reset Indicates that data in the memory range specified by lpAddress and dwSize is no longer of interest. The pages should not be read from or written to the paging file. However, the memory block will be used again later, so it should not be decommitted. This value cannot be used with any other value. Using this value does not guarantee that the range operated on with MEM_RESET will contain zeros. If you want the range to contain zeros, decommit the memory and then recommit it. When you use MEM_RESET, the VirtualAllocEx function ignores the value of fProtect. However, you must still set fProtect to a valid protection value, such as PAGE_NOACCESS. VirtualAllocEx returns an error if you use MEM_RESET and the range of memory is mapped to a file. A shared view is only acceptable if it is mapped to a paging file. ResetUndo MEM_RESET_UNDO should only be called on an address range to which MEM_RESET was successfully applied earlier. It indicates that the data in the specified memory range specified by lpAddress and dwSize is of interest to the caller and attempts to reverse the effects of MEM_RESET. If the function succeeds, that means all data in the specified address range is intact. If the function fails, at least some of the data in the address range has been replaced with zeroes. This value cannot be used with any other value. If MEM_RESET_UNDO is called on an address range which was not MEM_RESET earlier, the behavior is undefined. When you specify MEM_RESET, the VirtualAllocEx function ignores the value of flProtect. However, you must still set flProtect to a valid protection value, such as PAGE_NOACCESS. Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP: The MEM_RESET_UNDO flag is not supported until Windows 8 and Windows Server 2012. TopDown Allocates memory at the highest possible address. This can be slower than regular allocations, especially when there are many allocations. WriteWatch Causes the system to track pages that are written to in the allocated region. If you specify this value, you must also specify MEM_RESERVE. To retrieve the addresses of the pages that have been written to since the region was allocated or the write-tracking state was reset, call the GetWriteWatch function. To reset the write-tracking state, call GetWriteWatch or ResetWriteWatch. The write-tracking feature remains enabled for the memory region until the region is freed."
  },
  "api/ProcessMemoryUtilities.Native.MemoryProtectionFlags.html": {
    "href": "api/ProcessMemoryUtilities.Native.MemoryProtectionFlags.html",
    "title": "Enum MemoryProtectionFlags | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Enum MemoryProtectionFlags Defines the memory protection constants. Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax [Flags] public enum MemoryProtectionFlags : uint Fields Name Description Execute Enables execute access to the committed region of pages. An attempt to write to the committed region results in an access violation. This flag is not supported by the CreateFileMapping function. ExecuteRead Enables execute or read-only access to the committed region of pages. An attempt to write to the committed region results in an access violation. Windows Server 2003 and Windows XP: This attribute is not supported by the CreateFileMapping function until Windows XP with SP2 and Windows Server 2003 with SP1. ExecuteReadWrite Enables execute, read-only, or read/write access to the committed region of pages. Windows Server 2003 and Windows XP: This attribute is not supported by the CreateFileMapping function until Windows XP with SP2 and Windows Server 2003 with SP1. ExecuteWriteCopy Enables execute, read-only, or copy-on-write access to a mapped view of a file mapping object. An attempt to write to a committed copy-on-write page results in a private copy of the page being made for the process. The private page is marked as PAGE_EXECUTE_READWRITE, and the change is written to the new page. This flag is not supported by the VirtualAlloc or VirtualAllocEx functions. Windows Vista, Windows Server 2003 and Windows XP: This attribute is not supported by the CreateFileMapping function until Windows Vista with SP1 and Windows Server 2008. GuardModifierflag Pages in the region become guard pages. Any attempt to access a guard page causes the system to raise a STATUS_GUARD_PAGE_VIOLATION exception and turn off the guard page status. Guard pages thus act as a one-time access alarm. For more information, see Creating Guard Pages. When an access attempt leads the system to turn off guard page status, the underlying page protection takes over. If a guard page exception occurs during a system service, the service typically returns a failure status indicator. This value cannot be used with PAGE_NOACCESS. This flag is not supported by the CreateFileMapping function. Invalid An invalid value. NoAccess Disables all access to the committed region of pages. An attempt to read from, write to, or execute the committed region results in an access violation. This flag is not supported by the CreateFileMapping function. NoCacheModifierflag Sets all pages to be non-cachable. Applications should not use this attribute except when explicitly required for a device. Using the interlocked functions with memory that is mapped with SEC_NOCACHE can result in an EXCEPTION_ILLEGAL_INSTRUCTION exception. The PAGE_NOCACHE flag cannot be used with the PAGE_GUARD, PAGE_NOACCESS, or PAGE_WRITECOMBINE flags. The PAGE_NOCACHE flag can be used only when allocating private memory with the VirtualAlloc, VirtualAllocEx, or VirtualAllocExNuma functions. To enable non-cached memory access for shared memory, specify the SEC_NOCACHE flag when calling the CreateFileMapping function. ReadOnly Enables read-only access to the committed region of pages. An attempt to write to the committed region results in an access violation. If Data Execution Prevention is enabled, an attempt to execute code in the committed region results in an access violation. ReadWrite Enables read-only or read/write access to the committed region of pages. If Data Execution Prevention is enabled, attempting to execute code in the committed region results in an access violation. WriteCombineModifierflag Sets all pages to be write-combined. Applications should not use this attribute except when explicitly required for a device. Using the interlocked functions with memory that is mapped as write-combined can result in an EXCEPTION_ILLEGAL_INSTRUCTION exception. The PAGE_WRITECOMBINE flag cannot be specified with the PAGE_NOACCESS, PAGE_GUARD, and PAGE_NOCACHE flags. The PAGE_WRITECOMBINE flag can be used only when allocating private memory with the VirtualAlloc, VirtualAllocEx, or VirtualAllocExNuma functions. To enable write-combined memory access for shared memory, specify the SEC_WRITECOMBINE flag when calling the CreateFileMapping function. Windows Server 2003 and Windows XP: This flag is not supported until Windows Server 2003 with SP1. WriteCopy Enables read-only or copy-on-write access to a mapped view of a file mapping object. An attempt to write to a committed copy-on-write page results in a private copy of the page being made for the process. The private page is marked as PAGE_READWRITE, and the change is written to the new page. If Data Execution Prevention is enabled, attempting to execute code in the committed region results in an access violation. This flag is not supported by the VirtualAlloc or VirtualAllocEx functions."
  },
  "api/ProcessMemoryUtilities.Native.NtStatus.html": {
    "href": "api/ProcessMemoryUtilities.Native.NtStatus.html",
    "title": "Enum NtStatus | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Enum NtStatus Contains all NTSTATUS codes that could possibly happen when using this library. These may be incomplete. Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax public enum NtStatus : uint Fields Name Description ACCESS_DENIED A process has requested access to an object, but has not been granted those access rights. ACCESS_VIOLATION The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s. DATATYPE_MISALIGNMENT A datatype misalignment was detected in a load or store instruction. INSUFFICIENT_RESOURCES Insufficient system resources exist to complete the API. INVALID_HANDLE An invalid HANDLE was specified. OBJECT_TYPE_MISMATCH There is a mismatch between the type of object required by the requested operation and the type of object that is specified in the request. PARTIAL_COPY Due to protection conflicts not all the requested bytes could be copied. PROCESS_IS_TERMINATING An attempt was made to access an exiting process. SUCCESS STATUS_SUCCESS"
  },
  "api/ProcessMemoryUtilities.Native.WaitObjectResult.html": {
    "href": "api/ProcessMemoryUtilities.Native.WaitObjectResult.html",
    "title": "Enum WaitObjectResult | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Enum WaitObjectResult Defines the events that cause a function like WaitForSingleObject to return. Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax public enum WaitObjectResult : uint Fields Name Description Abandoned The specified object is a mutex object that was not released by the thread that owned the mutex object before the owning thread terminated. Ownership of the mutex object is granted to the calling thread and the mutex state is set to nonsignaled. If the mutex was protecting persistent state information, you should check it for consistency. Failed The function has failed. To get extended error information, call GetLastError. Success The state of the specified object is signaled. Timeout The time-out interval elapsed, and the object's state is nonsignaled."
  },
  "api/ProcessMemoryUtilities.Managed.html": {
    "href": "api/ProcessMemoryUtilities.Managed.html",
    "title": "Namespace ProcessMemoryUtilities.Managed | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Namespace ProcessMemoryUtilities.Managed Classes NativeWrapper Provides methods that replicate the behaviour of Kernel32 by using NtDll methods and applies basic error checking."
  },
  "api/ProcessMemoryUtilities.Native.ThreadCreationFlags.html": {
    "href": "api/ProcessMemoryUtilities.Native.ThreadCreationFlags.html",
    "title": "Enum ThreadCreationFlags | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Enum ThreadCreationFlags Defines flags that control the creation of a remote thread. Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax [Flags] public enum ThreadCreationFlags : uint Fields Name Description Immediately The thread runs immediately after creation. StackSizeParamIsAReservation The dwStackSize parameter specifies the initial reserve size of the stack. If this flag is not specified, dwStackSize specifies the commit size. Suspended The thread is created in a suspended state and does not run until the ResumeThread function is called."
  },
  "api/ProcessMemoryUtilities.Native.FreeType.html": {
    "href": "api/ProcessMemoryUtilities.Native.FreeType.html",
    "title": "Enum FreeType | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Enum FreeType Defines the different types of free operations. Namespace : ProcessMemoryUtilities.Native Assembly : ProcessMemoryUtilities.Native.dll Syntax [Flags] public enum FreeType : uint Fields Name Description CoalescePlaceholders To coalesce two adjacent placeholders, specify MEM_RELEASE | MEM_COALESCE_PLACEHOLDERS. When you coalesce placeholders, lpAddress and dwSize must exactly match those of the placeholder. Decommit Decommits the specified region of committed pages. After the operation, the pages are in the reserved state. The function does not fail if you attempt to decommit an uncommitted page. This means that you can decommit a range of pages without first determining their current commitment state. Do not use this value with MEM_RELEASE. The MEM_DECOMMIT value is not supported when the lpAddress parameter provides the base address for an enclave. Invalid An invalid value. PreservePlaceholder Frees an allocation back to a placeholder (after you've replaced a placeholder with a private allocation using VirtualAlloc2 or Virtual2AllocFromApp). To split a placeholder into two placeholders, specify MEM_RELEASE | MEM_PRESERVE_PLACEHOLDER. Release Releases the specified region of pages, or placeholder (for a placeholder, the address space is released and available for other allocations). After the operation, the pages are in the free state. If you specify this value, dwSize must be 0 (zero), and lpAddress must point to the base address returned by the VirtualAllocEx function when the region is reserved. The function fails if either of these conditions is not met. If any pages in the region are committed currently, the function first decommits, and then releases them. The function does not fail if you attempt to release pages that are in different states, some reserved and some committed. This means that you can release a range of pages without first determining the current commitment state. Do not use this value with MEM_DECOMMIT."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Add your introductions here!"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Reference | ProcessMemoryUtilities.Net Documentation",
    "keywords": "Reference This is where you find documentation for all members and objects in ProcessMemoryUtilities.Net. Managed The ProcessMemoryUtilities.Managed namespace provides access to convenient and more Kernel32 alike methods. There is just a single class which contains all methods you would normally use. NativeWrapper Native The ProcessMemoryUtilities.Native namespace provides all low level methods exported by this library. You also find all the important enums within this namespace. Classes NtDll Kernel32 Enums AllocationType FreeType MemoryProtectionFlags NtStatus ProcessAccessFlags ThreadCreationFlags WaitObjectResult"
  },
  "index.html": {
    "href": "index.html",
    "title": "ProcessMemoryUtilities.Net | ProcessMemoryUtilities.Net Documentation",
    "keywords": "ProcessMemoryUtilities.Net What is ProcessMemoryUtilities.Net? ProcessMemoryUtilities.Net implements performant wrapper methods over, in game hacking, commonly used NtDll and Kernel32 functions. The different classes allow you to use generic type parameters with ReadProcessMemory and WriteProcessMemory and call simpler functions like OpenProcess, CreateRemoteThread and more without any overhead. Installation You can install this library using the NuGet Package Manager. Install-Package ProcessMemoryUtilities.Net Where to start? You can find all relevant classes in our api documentation. API Reference Additional Resources GitHub NuGet Donate Do you like this project and want to help me to keep working on it? I appreciate any donation that helps me to continue working on OSS like this. BTC 14ES7f4GB3vD1C8Faz6ywqTcdDevxZoMyY ETH 0xd9E2CB12d310E7BF5E72F591D7A2b8820adced04"
  }
}